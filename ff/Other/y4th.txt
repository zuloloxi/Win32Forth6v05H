Random thoughts...

Forth is basically good programming.  Learning Forth is worthwhile even if you 
end up not using it.  The discipline that good Forth programming requires makes 
you a better programmer in any language.


From an economic standpoint, Forth is usually the best development tool for
embedded systems.

There are many times more C programmers than Forth programmers, which makes it
easier to staff C projects.  However, Forth's productivity still wins out.
Consider an example where you hire all C programmers for a Forth project.
According to the experience of Forth,inc., it takes about a week to learn Forth
and a month to become productive.

Let's suppose each programmer spends one non-productive month and then one month
that's about as productive as a month with C.  For the remaining months, suppose
that since they're relatively new to Forth, they're only twice as productive as
they would be using C. If the entire project lasts five months and the
programmers leave when it's finished, you break even.

This is a pessimistic example.  If the programmers stay, your cost is sunk and
Forth becomes a strategic advantage.  As with any strategic advantage, it has to 
be managed if you want to keep it.

If a company looks farther ahead than the next few quarters, it can develop 
Forth expertise that can be applied to bring products to market faster.  
This has to be a long-term strategy, though.  Although it doesn't take long to 
become productive in Forth, it does take several years before you start writing 
"good" Forth code.  Most of today's Openboot programmers, for example, are 
C transplants without many years experience in Forth, whose code is functional 
but not "good".


For systems containing much legacy code, Forth can be made to call modules
generated by your particular compiler.  That means extending Forth, but that's 
what Forth is for anyway.  Forth makes the C testable.



