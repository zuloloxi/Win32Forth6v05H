\ Boot code for a character LCD module on the SPIX bus.     7/05/01 Brad Eckert

\ This code reroutes terminal output to the LCD display.

host decimal
anew bootcode
homeorder building static               \ building a ROM image
also core also system definitions
0x000 0x7FF rom-bounds                  \ boot device is 25C160
{{ 0 org }}                             \ start at location 0
0xC0 c, 0xDE c,                         \ standard TOF key
0x00 c,                                 \ generic device type (see LOADER.FF)
tokenizing {{ 0x1000 >token# }}         \ relative TOKENIZED CODE
program autoexec                        c( tokenized boot program)

\ Character LCD interface

\ Port wiring uses lower 6 bits: D7 D6 D5 D4 E RS
\ This is a parallel port assumed to power up in an indeterminate state.
\ When port 2 is selected, X_BYTE! writes to the LCD control lines.

{{ hex }}

01 constant lcd_rs      \ Wire positions (2^bit#)
02 constant lcd_e

create LCDinit  4 c,    \ LCD initialization string: length
                28 c,   \ 4-bit data
                06 c,   \ increment cursor
                0E c,   \ display on, cursor on
                01 c,   \ Clear display

: >lcd          ( -- )          my x_node 2 x_port ;
: lcd_port!     ( c -- )        80 or x_byte! ;

\ >LCD must be invoked before writing to the LCD port.
\ PAUSE can leave the SPIX bus in an unknown state, requiring another >LCD.
\ MS and TICKS both have a PAUSE.

: lcd_nybble    ( n status -- )                 c( send nybble to the LCD port)
                >r 0F and 2* 2* dup             \ align 4-bit data
                r@ or lcd_e or  lcd_port!       \ pulse E line
                r> or lcd_port! ;               \ assume port! takes a few usec.

: lcd_byte      ( n status -- )                 c( send byte to the LCD port)
                >lcd  >r dup 4 rshift
                r@ lcd_nybble
                r> lcd_nybble
                2 0 ticks ;

: lcd_command   ( command --) 0 lcd_byte 2 ms ; c( send command to LCD) \ RS = 0
: lcd_data      ( data -- )   lcd_rs lcd_byte ; c( send data to LCD) \ RS = 1

: lcd_define    ( addr byte -- )                c( define user-defined character)
                3 lshift 40 or lcd_command      \ Select char to define
                8 >r
        multi   count lcd_data
        repeat  r>drop drop ;

: lcd_cls       ( -- )                          c( clear screen and home cursor)
                LCDinit count >r
        multi   count lcd_command
        repeat  r>drop drop ;

: lcd_init      ( -- )                          c( reset display from software)
                >lcd 0 lcd_port! 40 ms          \ Wait a little while
                >lcd 3 0 lcd_nybble 10 ms       \ spec calls for 4.1 mS delay
                >lcd 3 0 lcd_nybble 10 ms
                32 lcd_command                  \ put into 4-bit mode
                lcd_cls ;                       \ clear screen, enable display

create lcd_rows 0x00 c, 0x40 c, 0x14 c, 0x54 c, \ OK for ??x2 and 20x4 displays

: lcd_gotoxy    ( col row -- )                  c( position cursor WRT [0,0])
                lcd_rows + c@ +
                80 or lcd_command ;             \ set cursor position

lcd_init                                        \ initialize the LCD


 4 constant #rows
14 constant #cols
variable col            \ valid col = 0 to #cols-1
variable row            \ valid row = 0 to #rows-1
#rows #cols * array image \ image of LCD display

: 'char         ( -- addr )                     c( address image char )
                row @ #cols * col @ + image + ; \ assume char addressing

: scroll        ( -- )                          c( scroll display up a line )
                image #cols + image
                #cols #rows 1- * move           \ scroll image up a line
                'char #cols blank               \ clear last line
                >lcd image  #rows 0
                do      0 i lcd_gotoxy          \ repaint the screen
                        #cols 0
                        do count lcd_data loop  \ paint each line
                loop    drop ;

: repo          ( -- )                          c( restore cursor)
                col @ row @ lcd_gotoxy ;

: mycr          ( -- )                          c( CR )
                col off                         \ home column
                row incr row @ #rows >=         \ need to scroll?
        if      row decr  scroll                \ yes, stay at last row
        then    repo ;                          \ position cursor

: clip          ( x y limit -- y' x )           c( clip dimension )
                1- swap 0max min swap ;

: myxy          ( c r -- )                      c( re-position cursor )
                #rows clip #cols clip
                row ! col ! repo ;

: mycls         ( -- )                          c( clear screen )
                my x_node  lcd_cls
                0 0 row ! col ! ;

: myemit        ( c -- )                        c( process incoming character )
        case    0A of endof                     \ ignore LF
                0D of mycr endof                \ CR
                0C of mycls endof               \ ^L = cls
                dup lcd_data 'char c!           \ display & save character
                col incr                        \ bump column counter
                col @ #cols >= if mycr then     \ handle line wrap
                dup
        endcase ;

:: at-xy?       ( -- c r ) col @ row @ ;        c( get cursor position )
:: max-xy       ( -- c r ) #cols 1- #rows 1- ;  c( report cursor limits )


' myemit ' emit rebind   \ redirect terminal output to the LCD
' mycls  ' cls  rebind
' myxy   ' at-xy rebind

{{ decimal }}

end                                             \ end this block of code
\ END also resolves the length and checksum laid down by PROGRAM.
host

bsave lcd_emit.sb



