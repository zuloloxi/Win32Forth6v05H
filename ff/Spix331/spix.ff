\ SPIX bus using serial EPROM -- see Microchip 25C160 data sheet

decimal
HIDDEN DEFINITIONS temp-tokens
19 array eetemp         \ temporary storage for command/data concatenation
20 array eepad

SYSTEM DEFINITIONS HIDDEN main-tokens

cvariable last_byte                             c( result from x_byte!)

: x_byte!       ( c -- )                        c( write byte to SPIX output)
                last_byte c! last_byte 1 x_transfer ;

HIDDEN DEFINITIONS temp-tokens
: rdsr          ( -- c )
\ read status register: result is:
\ b3:b2 : 00=none 01=1/4 10=1/2 11=whole write protected
\ b1    : 1 = write enabled (WEL)
\ b0    : 1 = write in progress (WIP)
                5 eetemp c!  eetemp 2 x_transfer
                eetemp 1+ c@ ;

: eesetup       ( address cmd -- )              c( set up for EEPROM operation)
                0 x_port                        \ point to SPI EEPROM
                >r byte-split eetemp a! r> c!a+ \ lay command
                c!a+ c!a+ ;                     \ lay address

: wren          ( -- )  6 x_byte! ;             c( enable writing)

: waitwrite     ( -- )                          c( wait for write to finish)
        begin   pause rdsr 1 and 0=
        until   4 x_byte! ;                     \ disable writes


: eewrite       ( src dest len -- )             c( page write to EEPROM)
\ Page mode write: len <= 16 and you can't cross a page (16-byte) boundary
                >r wren 2 eesetup               \ write:
                a@ r@ move                      \ the data --> command packet
                eetemp r> 3 + x_transfer        \ do the command
                waitwrite ;

: eeread        ( src dest len -- )             c( read from boot EEPROM)
\ Read EEPROM into RAM using page read. Len can be up to 16.
                16 min
                0 x_port                        \ device 0 is boot EEPROM
                2>r 3 eesetup                   ( | dest len )
                eetemp R@ 3 + x_transfer        \ do the EEPROM transfer
                eetemp 3 + 2r> move ;           \ move to destination

SYSTEM DEFINITIONS HIDDEN main-tokens

: x_read        ( src dest len -- )             c( read from boot EEPROM)
\ Read EEPROM into RAM using page read.
\ Read segments twice to check for bit errors.
                >r
        begin   r@ 0>
        while   begin   pause
                        2dup       r@ eeread    \ read to memory
                        over eepad r@ eeread    \ read again to test
                        eepad over r@ 16 min comp
                        0=                      \ until it's a good read
                until
                r> 16 - >r
                >r 16 + r> 16 +
        repeat  r>drop 2drop ;

: x_write       ( src dest len -- )             c( write to boot EEPROM)
\ Write data in blocks until it's written
                0 x_port                        \ device 0 is boot EEPROM
        begin   ?dup
        while   >r dup invert 15 and 1+         \ # of bytes allowed this page
                r@ min >r                       ( src dest | len sublen )
                over r@ + over r@ + 2swap       ( s' d' src dest | len sublen )
                r@ eewrite 2r> -
        repeat  2drop ;

: x_wrsr        ( c -- result )                 c( write to status register)
                0 x_port  wren                  \ device 0 is boot EEPROM
                eetemp a! 1 c!a+ c!a+
                eetemp 2 x_transfer waitwrite ; \ write it

CORE DEFINITIONS


